Introduction
------------

Version 4.0 of HARP_Opt, while similar in function, is a significant shift in implementation from past versions.  The major changes include moving the code-base from MATLAB to a Python, replacing the aerodynamic performance tool, allowing for any aerodynamic tool to be used within the same optimization framework, and allowing for decreased solution time made possible by using analytic gradients.

The move to Python was done for several reasons.  The primary reason is for compatibility with NREL's Systems Engineering tool: WISDEM.  This allows HARP_Opt to be easily extended to do more sophisticated analyses beyond simply rotor aerodynamic optimization.  WISDEM provides complimentary tools for rotor structural analysis, drivetrains, towers, and various cost models.  These additional models contained in WISDEM are expected to be released later this year (2014).  HARP_Opt represents the simplest case, where only the rotor is optimized, and only aerodynamic performance is considered.  Switching to Python affords additional benefits.  Python allows for straightforward high-level connections between codes written in Fortran and C/C++, without having to resort to file i/o.  By adopting Python we can also make use of NASA's OpenMDAO framework.  OpenMDAO makes it much easier to compute accurate system-level gradients, particularly for problems with a large number of components.  It also provides a wide variety of optimizers and solvers.   Finally, the Python interpreter is freely available, and does not require purchasing any licenses.

The aerodynamic analysis tool has been replaced with CCBlade.  CCBlade solves the same blade element momentum equations, but with a new solution method that has guaranteed convergence.  This is important to allow robust use of gradient-based optimization.  Additionally, analytic gradients have been derived for CCBlade, as well as for all supporting components in the analysis set.  Analytic system-level gradients allows for much faster and reliable optimization convergence.  HARP_Opt is written in Python, but iteration-heavy sections of CCBlade are written in Fortran in order to improve performance.  Other aerodynamic performance tools (instead of CCBlade) can be used with only minimal changes.